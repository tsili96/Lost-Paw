@model LostPaw.AppConfig.GoogleConfig

@{
    ViewData["Title"] = "Nearby Veterinarians";
}

<h2 class="mb-4">Nearby Veterinarians</h2>

<div class="row">
    <div class="col-md-4 mb-3">
        <div class="card shadow-sm border-0 p-3">
            <p class="small text-muted">
                If the detected location is not accurate, you can manually choose your location below.
            </p>

            <input type="text" id="locationSearch" class="form-control mb-3" placeholder="🔍 Type your address..." />

            <button id="manualLocationBtn" class="btn btn-outline-primary w-100 mb-2">
                📍 Set My Location by Map Click
            </button>

            <button id="resetLocationBtn" class="btn btn-outline-secondary w-100 mb-3">
                🔄 Use My Current Location
            </button>

            <h5 class="mb-2">Results</h5>
            <ul id="placesList" class="list-group small"></ul>
        </div>
    </div>

    <div class="col-md-8">
        <div id="map" style="height: 500px; width: 100%; border-radius: 10px;"></div>
    </div>
</div>

@section Scripts {
    <script>
        let map;
        let userLocation = null;
        const markers = new Set();
        let manualLocationMode = false;
        let manualMarker = null;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 37.9838, lng: 23.7275 }, // Default to Athens 
                zoom: 12
            });

            // Attempt geolocation
            detectUserLocation();

            // Set manual location mode
            document.getElementById("manualLocationBtn").addEventListener("click", () => {
                alert("Click anywhere on the map to choose your location.");
                manualLocationMode = true;
            });

            // Reset to current location
            document.getElementById("resetLocationBtn").addEventListener("click", () => {
                detectUserLocation(true);
            });

            // Handle manual map click
            map.addListener("click", function (event) {
                if (manualLocationMode) {
                    const latLng = event.latLng;

                    if (manualMarker) manualMarker.setMap(null);

                    manualMarker = new google.maps.Marker({
                        position: latLng,
                        map: map,
                        title: "Your Selected Location",
                        draggable: true,
                        icon: {
                            url: "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
                        }
                    });

                    map.panTo(latLng);
                    map.setZoom(15);
                    manualLocationMode = false;

                    alert(`📍 Location set at: ${latLng.lat().toFixed(5)}, ${latLng.lng().toFixed(5)}`);

                    clearResults();
                    searchNearby({ lat: latLng.lat(), lng: latLng.lng() });
                }
            });
            // Autocomplete setup
            const autocompleteInput = document.getElementById("locationSearch");
            const autocomplete = new google.maps.places.Autocomplete(autocompleteInput);
            autocomplete.bindTo("bounds", map);

            autocomplete.addListener("place_changed", function () {
                const place = autocomplete.getPlace();
                if (!place.geometry || !place.geometry.location) {
                    alert("❌ No location found.");
                    return;
                }

                if (manualMarker) manualMarker.setMap(null);

                manualMarker = new google.maps.Marker({
                    map: map,
                    position: place.geometry.location,
                    title: "Your Selected Location",
                    icon: {
                        url: "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
                    }
                });

                map.panTo(place.geometry.location);
                map.setZoom(15);
                clearResults();
                searchNearby({
                    lat: place.geometry.location.lat(),
                    lng: place.geometry.location.lng()
                });
            });
        }
        

        function detectUserLocation(showAlert = false) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    map.setCenter(userLocation);
                    map.setZoom(14);

                    new google.maps.Marker({
                        position: userLocation,
                        map: map,
                        title: "You are here",
                        icon: {
                            url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                        }
                    });

                    if (showAlert) {
                        alert("✅ Location reset to your current position.");
                    }

                    clearResults();
                    searchNearby(userLocation);
                }, function () {
                    alert("❌ Could not access your location. Try setting it manually.");
                });
            } else {
                alert("❌ Your browser doesn't support geolocation.");
            }
        }

        function clearResults() {
            document.getElementById("placesList").innerHTML = "";
            markers.clear();
        }

        function searchNearby(location) {
            const service = new google.maps.places.PlacesService(map);
            const placesList = document.getElementById("placesList");

            const keywords = ['κτηνίατρος', 'κτηνιατρείο'];

            keywords.forEach(term => {
                const request = {
                    location: location,
                    radius: 5000,
                    keyword: term
                };

                service.nearbySearch(request, function (results, status) {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        results.forEach(place => {
                            const key = `${place.name}-${place.geometry.location.lat()}-${place.geometry.location.lng()}`;

                            if (!markers.has(key)) {
                                markers.add(key);

                                const marker = new google.maps.Marker({
                                    map: map,
                                    position: place.geometry.location,
                                    title: place.name
                                });

                                const infoWindow = new google.maps.InfoWindow({
                                    content: `
                                                <div>
                                                    <strong>${place.name}</strong><br>
                                                    ${place.vicinity || ''}
                                                </div>
                                            `
                                });

                                marker.addListener("click", () => {
                                    infoWindow.open(map, marker);
                                });

                                const listItem = document.createElement("li");
                                listItem.classList.add("list-group-item", "list-group-item-action");
                                listItem.innerHTML = `<strong>${place.name}</strong><br><small>${place.vicinity || ''}</small>`;

                                listItem.addEventListener("click", () => {
                                    map.panTo(place.geometry.location);
                                    map.setZoom(15);
                                    infoWindow.open(map, marker);
                                });

                                placesList.appendChild(listItem);
                            }
                        });
                    }
                });
            });
        }
    </script>

    @{
        var googleMapsUrl = $"https://maps.googleapis.com/maps/api/js?key={Model.ApiKey}&libraries=places&callback=initMap";
    }
    <script async
            src=@googleMapsUrl>
    </script>
}
